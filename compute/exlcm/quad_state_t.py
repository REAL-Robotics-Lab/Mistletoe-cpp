"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

from io import BytesIO
import struct

import exlcm

class quad_state_t(object):

    __slots__ = ["timestamp", "position", "velocity", "contacts"]

    __typenames__ = ["int64_t", "double", "double", "exlcm.bool"]

    __dimensions__ = [None, [12], [12], [4]]

    def __init__(self):
        self.timestamp = 0
        """ LCM Type: int64_t """
        self.position = [ 0.0 for dim0 in range(12) ]
        """ LCM Type: double[12] """
        self.velocity = [ 0.0 for dim0 in range(12) ]
        """ LCM Type: double[12] """
        self.contacts = [ exlcm.bool() for dim0 in range(4) ]
        """ LCM Type: exlcm.bool[4] """

    def encode(self):
        buf = BytesIO()
        buf.write(quad_state_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp))
        buf.write(struct.pack('>12d', *self.position[:12]))
        buf.write(struct.pack('>12d', *self.velocity[:12]))
        for i0 in range(4):
            assert self.contacts[i0]._get_packed_fingerprint() == exlcm.bool._get_packed_fingerprint()
            self.contacts[i0]._encode_one(buf)

    @staticmethod
    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != quad_state_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return quad_state_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = quad_state_t()
        self.timestamp = struct.unpack(">q", buf.read(8))[0]
        self.position = struct.unpack('>12d', buf.read(96))
        self.velocity = struct.unpack('>12d', buf.read(96))
        self.contacts = []
        for i0 in range(4):
            self.contacts.append(exlcm.bool._decode_one(buf))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if quad_state_t in parents: return 0
        newparents = parents + [quad_state_t]
        tmphash = (0x3886b5a35805f0b1+ exlcm.bool._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if quad_state_t._packed_fingerprint is None:
            quad_state_t._packed_fingerprint = struct.pack(">Q", quad_state_t._get_hash_recursive([]))
        return quad_state_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", quad_state_t._get_packed_fingerprint())[0]

