"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

from io import BytesIO
import struct

class velocity_command_t(object):

    __slots__ = ["lin_vel_x", "lin_vel_y", "heading"]

    __typenames__ = ["double", "double", "double"]

    __dimensions__ = [None, None, None]

    def __init__(self):
        self.lin_vel_x = 0.0
        """ LCM Type: double """
        self.lin_vel_y = 0.0
        """ LCM Type: double """
        self.heading = 0.0
        """ LCM Type: double """

    def encode(self):
        buf = BytesIO()
        buf.write(velocity_command_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ddd", self.lin_vel_x, self.lin_vel_y, self.heading))

    @staticmethod
    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != velocity_command_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return velocity_command_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = velocity_command_t()
        self.lin_vel_x, self.lin_vel_y, self.heading = struct.unpack(">ddd", buf.read(24))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if velocity_command_t in parents: return 0
        tmphash = (0xf78f597ea146b120) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if velocity_command_t._packed_fingerprint is None:
            velocity_command_t._packed_fingerprint = struct.pack(">Q", velocity_command_t._get_hash_recursive([]))
        return velocity_command_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", velocity_command_t._get_packed_fingerprint())[0]

